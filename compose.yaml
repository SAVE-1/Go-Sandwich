
#  https://doc.traefik.io/traefik/v1.4/basics/

services:
  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  consumer:
    image: "rabbitmq-consumer"
    build:
      context: .
      dockerfile: ./microservices/consumer.Dockerfile
    restart: always
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/

  producer:
    image: "rabbitmq-producer"
    # ports:
    #   - "8083:8083"
    build:
      context: .
      dockerfile: ./microservices/producer.Dockerfile
    restart: always
    networks:
      - backend
      - frontend
    depends_on:
      rabbitmq:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.producer.rule=Host(`localhost`) && PathPrefix(`/sandwich`)"
      - "traefik.http.routers.producer.entrypoints=web"
      - "traefik.http.services.producer.loadbalancer.server.port=8083"
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - PRODUCER_HOST_PORT=8083

# TESTING
  traefik:
    image: "traefik:v3.4"
    container_name: "traefik"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - frontend
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"
      - "--entryPoints.web.address=:80"
      -  "--providers.file.filename=/config/traefik-config.yaml"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./infra/traefik/traefik-config.yaml:/config/traefik-config.yaml"

  whoami-api:
    image: "traefik/whoami"
    networks:
      - frontend
    container_name: "whoami-api"
    environment:
      - WHOAMI_NAME=API Service
    labels:
      - "traefik.enable=true"
      # Path-based routing
      - "traefik.http.routers.whoami-api.rule=Host(`whoami.docker.localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.whoami-api.entrypoints=web"

# TESTING

volumes:
  rabbitmq_data:

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
